[
  {
    "authors": null,
    "categories": null,
    "content": " What happens when the repository is offline? Scripts won\u0026rsquo;t work. There are exceptions e.g., if the cache holds all required scripts, but in many cases the script just will not run. To avoid such a dependency on a working server you can compile your script into a static script with our module compiler.\nWhat is the difference between module.sh and mdl.sh? Those are both domains of this project. The website is hosted on module.sh and the code repository on mdl.sh (which is module.sh with the vowels removed). We thought that it would be nice to have a short domain like mdl.sh to be used in the code.\nWhy do you use cksum and not something more secure like sha256sum? For POSIX compliance. To our knowledge cksum is part of POSIX and should be available on all POSIX compliant operating sytems. Nevertheless, for your own scripts you can choose something stronger. Just take a quick look at how the validation happens. For example:\nmodule \u0026quot;helloWorld\u0026quot; \u0026quot;https://mdl.sh/hello-world/hello-world-1.0.0.sh\u0026quot; \u0026quot;sha256sum-a37ed750daa549599dba74f66030bd351b41c6ea227c0b1cd596e7efc6a5cada\u0026quot;  ",
    "date": 1461103200,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1461103200,
    "objectID": "c6ccac1d2d45f5904ffc358c942fa416",
    "permalink": "/faq/faq/",
    "publishdate": "2016-04-20T00:00:00+02:00",
    "relpermalink": "/faq/faq/",
    "section": "FAQ",
    "summary": "What happens when the repository is offline? Scripts won\u0026rsquo;t work. There are exceptions e.g., if the cache holds all required scripts, but in many cases the script just will not run. To avoid such a dependency on a working server you can compile your script into a static script with our module compiler.\nWhat is the difference between module.sh and mdl.sh? Those are both domains of this project. The website is hosted on module.",
    "tags": null,
    "title": "Frequently Asked Questions",
    "type": "FAQ"
  },
  {
    "authors": null,
    "categories": null,
    "content": " Next we are taking a look at how to create a module Creating a module is easy. In general, modules are just plain shell scripts.\nRequirements There are just two things to be aware of:\n a shebang MUST be present (e.g., #!/bin/sh, if POSIX compliant)\n modules should assume the function module is defined\n  Example This example module (\u0026lsquo;Greeter\u0026rsquo;) takes one argument, the name, and writes a message containing that name to standard out. If no name is provided it writes an error message to standard error and returns error code 1:\n#!/bin/sh name=\u0026quot;$1\u0026quot; if [ \u0026quot;$name\u0026quot; != \u0026quot;\u0026quot; ]; then printf 'Hello %s' \u0026quot;$name\u0026quot; else echo \u0026quot;No name provided to module Greeter\u0026quot; \u0026gt;/dev/stderr return 1 fi  In order, to foster cooperation and the online availability of modules, module.sh doesn\u0026rsquo;t support importing modules from filesystem. So if you want to use your module you should place it on a web-server (e.g., example.org) and load it from there:\n#!/bin/sh # load module.sh eval \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/latest\u0026quot;)\u0026quot; # load module greeter module \u0026quot;greeter\u0026quot; \u0026quot;https://example.com/greeter.sh\u0026quot; # use module greeter greeter \u0026quot;Bob\u0026quot;  Executing that script should result in Hello Bob\nSince we also acknowledge that for module developers it is an important feature to load modules from disk (which we required ourselves during the development of module.sh), we added an extra module module-local to our repository (not published yet).\nBest practices Since the strength of shell scripts is not its performance, but its compability to run on different platforms, we encurage POSIX compliance and correntness.\nShebangs If you have gone the extra mile to create a POSIX compliant script you can and should use the #!/bin/sh shebang.\nIf you were lazy and used e.g., bash syntax, please use the modern #!/usr/bin/env bash shebang.\nOptions Modules should not set options themselves but should be able to run with the following configuration:\nset -eEuo pipefail  This means abort script execution if\n a command returned a non-zero error code outside of a condition clause (-e) even in sub-shells (-E) and pipes (-o pipefail) or if an unbound/undefined variable is used (-u)  Shellcheck Another great way to help you writing awesome scripts is the tool shellcheck.\nPublishing on mdl.sh If you have followed the best practices and are willing to donate your script to the public domain, please feel free to create a pull request via Github.\n",
    "date": 1541458800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541458800,
    "objectID": "61210a8d2eb74d64a242878061d35ca2",
    "permalink": "/doc/how-to-create-a-module/",
    "publishdate": "2018-11-06T00:00:00+01:00",
    "relpermalink": "/doc/how-to-create-a-module/",
    "section": "doc",
    "summary": "Next we are taking a look at how to create a module Creating a module is easy. In general, modules are just plain shell scripts.\nRequirements There are just two things to be aware of:\n a shebang MUST be present (e.g., #!/bin/sh, if POSIX compliant)\n modules should assume the function module is defined\n  Example This example module (\u0026lsquo;Greeter\u0026rsquo;) takes one argument, the name, and writes a message containing that name to standard out.",
    "tags": null,
    "title": "How to create a module",
    "type": "docs"
  },
  {
    "authors": null,
    "categories": null,
    "content": " After downloading Module.sh it should be straight forward to use it.\nAt first it must be loaded, either by sourcing it:\n. \u0026quot;$(dirname \u0026quot;$(readlink -f \u0026quot;$0\u0026quot;)\u0026quot;)/module.sh\u0026quot;  Or by using the eval+curl chain:\neval \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/latest\u0026quot;)\u0026quot;  Usage The usage can be described as follows:\nmodule [-s] name url [checksum]  So Module.sh takes\n one optional flag -s two mandatory positional parameters one optional positional parameter  The optional flag -s controls if module.sh executes the module in a sub-shell to preserve the global scope. In general, is should be not be set. The main use-case is writing a similar tool like module.sh which requires access to the global scope.\nWith the first manadatory argument you can control under which name you want to be able to reach the module. Within Module.sh we use the lower camel case reprensentation of the module name, but you are free to use whatever you like.\nThe second mandatory parameter is the url und which the module is accessable. The protocol must be HTTPS.\nThe last parameter is optional, but recommended. If set, it should contain a checksum for the module. The checksum consist of two parts which are separated by a \u0026lsquo;-\u0026rsquo;. The first part defines which program should be used to calculate the checksum, the second part is the first part of the checksum.\nCalculating checksums To calculate the checksum of the module hello-world the following commands can be used:\nFor cksum:\nprintf 'cksum-%s\\n' \u0026quot;$(printf '%s' \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/hello-world/hello-world-1.0.0.sh\u0026quot;)\u0026quot; | cksum | cut -d ' ' -f1)\u0026quot;  For md5sum:\nprintf 'md5sum-%s\\n' \u0026quot;$(printf '%s' \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/hello-world/hello-world-1.0.0.sh\u0026quot;)\u0026quot; | md5sum | cut -d ' ' -f1)\u0026quot;  In general, we recommend using cksum as it is part of POSIX. If the checksum should provide some security aspect you might want consider using sha256sum.\n",
    "date": 1541458800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541458800,
    "objectID": "db05e47ecff091d1a08564bf7f8bd5e4",
    "permalink": "/doc/how-to-use-module.sh/",
    "publishdate": "2018-11-06T00:00:00+01:00",
    "relpermalink": "/doc/how-to-use-module.sh/",
    "section": "doc",
    "summary": "After downloading Module.sh it should be straight forward to use it.\nAt first it must be loaded, either by sourcing it:\n. \u0026quot;$(dirname \u0026quot;$(readlink -f \u0026quot;$0\u0026quot;)\u0026quot;)/module.sh\u0026quot;  Or by using the eval+curl chain:\neval \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/latest\u0026quot;)\u0026quot;  Usage The usage can be described as follows:\nmodule [-s] name url [checksum]  So Module.sh takes\n one optional flag -s two mandatory positional parameters one optional positional parameter  The optional flag -s controls if module.",
    "tags": null,
    "title": "How to use Module.sh",
    "type": "docs"
  },
  {
    "authors": null,
    "categories": null,
    "content": " The compiler can be use to turn scripts which use Module.sh into static scripts which contain all their dependecies and do not require Module.sh anymore. This is a great way to ensure a script will work even if the repository will be unavailable.\nDownload You can download the compiler from\nhttps://mdl.sh/module-tools/compiler-0.9.0.sh\nOn the shell:\ncurl -O https://mdl.sh/module-tools/compiler-0.9.0.sh chmod +x compiler-0.9.0.sh  Usage The compiler takes 2 arguments:\n the scripts file which should be compiled\n the output file, which should not exist\n  ./compiler-0.9.0.sh demo.sh demo-static.sh  ",
    "date": 1541458800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541458800,
    "objectID": "f1e4518ef115d14595334ca29f55d819",
    "permalink": "/doc/how-to-use-the-compiler/",
    "publishdate": "2018-11-06T00:00:00+01:00",
    "relpermalink": "/doc/how-to-use-the-compiler/",
    "section": "doc",
    "summary": "The compiler can be use to turn scripts which use Module.sh into static scripts which contain all their dependecies and do not require Module.sh anymore. This is a great way to ensure a script will work even if the repository will be unavailable.\nDownload You can download the compiler from\nhttps://mdl.sh/module-tools/compiler-0.9.0.sh\nOn the shell:\ncurl -O https://mdl.sh/module-tools/compiler-0.9.0.sh chmod +x compiler-0.9.0.sh  Usage The compiler takes 2 arguments:\n the scripts file which should be compiled",
    "tags": null,
    "title": "How to use the compiler",
    "type": "docs"
  },
  {
    "authors": null,
    "categories": null,
    "content": " What Module.sh does is quite simple. The complexity comes alone from making it work under different conditions. So it should be easy to understand.\nThe basic Logic Whenever we write module \u0026quot;NAME\u0026quot; \u0026quot;https://example.com/ABC.sh\u0026quot; Module.sh replaces that line with the content from the URL, plus a thin wrapper.\nThat wrapper makes it available under the name and creates a sub-shell to separate the scope:\n$name() {( # [download content] )}  A simple Example Let us use the hello-world module\n#!/bin/sh echo \u0026quot;Hello World\u0026quot;  and use it in a normal script (demo.sh):\n#!/bin/sh set -eEuo pipefail eval \u0026quot;$(curl -fsL \u0026quot;https://mdl.sh/module/module-static-0.9.0.sh\u0026quot;)\u0026quot; module \u0026quot;helloWorld\u0026quot; \u0026quot;https://mdl.sh/hello-world/hello-world-1.0.0.sh\u0026quot; helloWorld  Now we will download the compiler and make it executable:\ncurl -O https://mdl.sh/module-tools/compiler-0.9.0.sh chmod +x compiler-0.9.0.sh  To compile the demo.sh we use the following command:\n./compiler-0.9.0.sh demo.sh demo-static.sh  Afterwards we can see the compiled result (demo-static.sh):\n#!/bin/sh set -eEuo pipefail # start module https://mdl.sh/hello-world/hello-world-1.0.0.sh helloWorld() {( echo \u0026quot;Hello World\u0026quot; )} # end module https://mdl.sh/hello-world/hello-world-1.0.0.sh helloWorld  So basically it looks like we expected it. The lines for loading module.sh and loading the hello-world module got replaced by the content of the hello-world module plus the wrapper (and some additional comments).\n",
    "date": 1541458800,
    "expirydate": -62135596800,
    "kind": "page",
    "lang": "en",
    "lastmod": 1541458800,
    "objectID": "5cf0ce1cd03ebf112538b3e48b57f625",
    "permalink": "/doc/understanding-module.sh/",
    "publishdate": "2018-11-06T00:00:00+01:00",
    "relpermalink": "/doc/understanding-module.sh/",
    "section": "doc",
    "summary": "What Module.sh does is quite simple. The complexity comes alone from making it work under different conditions. So it should be easy to understand.\nThe basic Logic Whenever we write module \u0026quot;NAME\u0026quot; \u0026quot;https://example.com/ABC.sh\u0026quot; Module.sh replaces that line with the content from the URL, plus a thin wrapper.\nThat wrapper makes it available under the name and creates a sub-shell to separate the scope:\n$name() {( # [download content] )}  A simple Example Let us use the hello-world module",
    "tags": null,
    "title": "Understanding Module.sh",
    "type": "docs"
  }
]